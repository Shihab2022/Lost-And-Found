// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userProfile UserProfile?
  foundItem   FoundItem[]
  Claim       Claim[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?  @default("You are not provided you Bio data .Please update those information .")
  age       Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("userProfile")
}

model Category {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  foundItem FoundItem[]

  @@map("category")
}

model FoundItem {
  id            String   @id @default(uuid())
  userId        String
  categoryId    String
  foundItemName String
  description   String
  location      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  claim         Claim?
  user          User     @relation(fields: [userId], references: [id])
  category      Category @relation(fields: [categoryId], references: [id])

  @@map("foundItem")
}

model Claim {
  id                     String   @id @default(uuid())
  userId                 String
  foundItemId            String   @unique
  status                 Status   @default(PENDING)
  distinguishingFeatures String
  lostDate               DateTime @default(now())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  foundItem FoundItem @relation(fields: [foundItemId], references: [id])

  @@map("claim")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
